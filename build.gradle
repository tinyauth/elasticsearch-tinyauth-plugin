buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
  }

  dependencies {
    classpath "org.elasticsearch.gradle:build-tools:5.5.2"
  }
}

group = 'org.elasticsearch.plugin'
version = '0.0.1-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'elasticsearch.esplugin'
apply plugin: 'idea'

// licenseFile = rootProject.file('LICENSE.txt')
// noticeFile = rootProject.file('NOTICE.txt')

esplugin {
  name 'tinyauth'
  description 'Adds tinyauth powered authentication'
  classname 'io.tinyauth.elasticsearch.TinyauthPlugin'
  licenseFile rootProject.file('LICENSE.txt')
  noticeFile rootProject.file('NOTICE.txt')
}

// In this section you declare the dependencies for your production and test code
// Note, the two dependencies are not really needed as the buildscript dependency gets them in already
// they are just here as an example
dependencies {
  compile 'org.elasticsearch:elasticsearch:5.5.2'
  compile 'org.json:json:20141113'
  compile 'com.mashape.unirest:unirest-java:1.4.9'
  compile 'org.apache.httpcomponents:httpcore:4.3'
  compile 'org.apache.httpcomponents:httpcore-nio:4.3'
  compile 'org.apache.httpcomponents:httpclient:4.3.6'
  compile 'org.apache.httpcomponents:httpasyncclient:4.0.2'
  compile 'org.apache.httpcomponents:httpmime:4.3.6'  
  compile 'commons-logging:commons-logging:1.1.1'
  compile 'com.github.guavaberry:guavaberry:1.0.0'

  testCompile 'org.elasticsearch.test:framework:5.5.2'
}

// Set to false to not use elasticsearch checkstyle rules
checkstyleMain.enabled = true
checkstyleTest.enabled = true

// FIXME dependency license check needs to be enabled
dependencyLicenses.enabled = false

// FIXME thirdparty audit needs to be enabled
thirdPartyAudit.enabled = false

// Uncomment this to skip license header checks
// licenseHeaders.enabled = false

task downloadDependencies {
  description "Pre-downloads *most* dependencies"
  doLast {
    configurations.getAsMap().each { name, config ->
      println "Retrieving dependencies for $name"
      try {
        config.files
      } catch (e) {
        project.logger.info e.message // some cannot be resolved, silentlyish skip them
      }
    }
  }
}
